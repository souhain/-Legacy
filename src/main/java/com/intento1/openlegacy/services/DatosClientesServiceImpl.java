package com.intento1.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.intento1.openlegacy.NuevoCliente;
import java.math.BigDecimal;
import org.openlegacy.rpc.RpcSession;
import org.openlegacy.rpc.actions.RpcActions;

import org.openlegacy.log.ServiceUsageLogger;
import org.openlegacy.annotations.services.Service;
import org.openlegacy.annotations.OpenlegacyDesigntime;
import org.openlegacy.services.ws.ServiceBinder;
import org.springframework.context.ApplicationContext;
import javax.inject.Inject;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test DatosClientesServiceTest.
 *  The interface DatosClientesService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relavant screens.
 */
@Service(name = "DatosClientes")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
public class DatosClientesServiceImpl implements DatosClientesService {

	private static final String SERVICE_NAME = "DatosClientes";

	@Inject
	private ApplicationContext applicationContext;

	@Inject
	private ServiceUsageLogger serviceLogger;

	@Inject
	private ServiceBinder serviceBinder;

	@Override
	public DatosClientesOut getDatosClientes(DatosClientesIn datosClientesIn) throws Exception {
		long time = System.currentTimeMillis();
		DatosClientesOut datosClientesOut = new DatosClientesOut();
		/* autogenerated - sessions block start*/
		;
		RpcSession rpcSession = applicationContext.getBean("rpcSession", RpcSession.class);
		/* autogenerated - sessions block end */
		;

		try {
			/* autogenerated - execution block start */;
			NuevoCliente nuevoCliente = serviceBinder.bindInputs("nuevoCliente", new NuevoCliente(), datosClientesIn);
			nuevoCliente = rpcSession.doAction(ActionUtil.getRpcAction(NuevoCliente.class), nuevoCliente);
			/* autogenerated - execution block end */;

			/* autogenerated - output block start */;
			datosClientesOut = serviceBinder.bindOutput(datosClientesOut, new String[]{"datosClientesIn", "nuevoCliente"}, datosClientesIn, nuevoCliente);
			/* autogenerated - output block end */;

			return datosClientesOut;
		} catch (Exception e) {
			serviceLogger.error(e, SERVICE_NAME, null);
			throw e;
		} finally {
			time = System.currentTimeMillis() - time;
			/* autogenerated - disconnect block start */
			;
			rpcSession.disconnect();
			serviceLogger.log(SERVICE_NAME, time, rpcSession.getProperties().getId(), datosClientesIn, datosClientesOut, "host");
			/* autogenerated - disconnect block end */
			;
		}
	}

}
